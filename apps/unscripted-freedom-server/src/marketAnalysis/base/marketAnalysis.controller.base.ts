/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MarketAnalysisService } from "../marketAnalysis.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MarketAnalysisCreateInput } from "./MarketAnalysisCreateInput";
import { MarketAnalysis } from "./MarketAnalysis";
import { MarketAnalysisFindManyArgs } from "./MarketAnalysisFindManyArgs";
import { MarketAnalysisWhereUniqueInput } from "./MarketAnalysisWhereUniqueInput";
import { MarketAnalysisUpdateInput } from "./MarketAnalysisUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MarketAnalysisControllerBase {
  constructor(
    protected readonly service: MarketAnalysisService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MarketAnalysis })
  @nestAccessControl.UseRoles({
    resource: "MarketAnalysis",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMarketAnalysis(
    @common.Body() data: MarketAnalysisCreateInput
  ): Promise<MarketAnalysis> {
    return await this.service.createMarketAnalysis({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        analysisDate: true,
        createdAt: true,
        id: true,
        marketType: true,
        summary: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MarketAnalysis] })
  @ApiNestedQuery(MarketAnalysisFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MarketAnalysis",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async marketAnalyses(
    @common.Req() request: Request
  ): Promise<MarketAnalysis[]> {
    const args = plainToClass(MarketAnalysisFindManyArgs, request.query);
    return this.service.marketAnalyses({
      ...args,
      select: {
        analysisDate: true,
        createdAt: true,
        id: true,
        marketType: true,
        summary: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MarketAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MarketAnalysis",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async marketAnalysis(
    @common.Param() params: MarketAnalysisWhereUniqueInput
  ): Promise<MarketAnalysis | null> {
    const result = await this.service.marketAnalysis({
      where: params,
      select: {
        analysisDate: true,
        createdAt: true,
        id: true,
        marketType: true,
        summary: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MarketAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MarketAnalysis",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMarketAnalysis(
    @common.Param() params: MarketAnalysisWhereUniqueInput,
    @common.Body() data: MarketAnalysisUpdateInput
  ): Promise<MarketAnalysis | null> {
    try {
      return await this.service.updateMarketAnalysis({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          analysisDate: true,
          createdAt: true,
          id: true,
          marketType: true,
          summary: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MarketAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MarketAnalysis",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMarketAnalysis(
    @common.Param() params: MarketAnalysisWhereUniqueInput
  ): Promise<MarketAnalysis | null> {
    try {
      return await this.service.deleteMarketAnalysis({
        where: params,
        select: {
          analysisDate: true,
          createdAt: true,
          id: true,
          marketType: true,
          summary: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
