/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EducationalContent } from "./EducationalContent";
import { EducationalContentCountArgs } from "./EducationalContentCountArgs";
import { EducationalContentFindManyArgs } from "./EducationalContentFindManyArgs";
import { EducationalContentFindUniqueArgs } from "./EducationalContentFindUniqueArgs";
import { CreateEducationalContentArgs } from "./CreateEducationalContentArgs";
import { UpdateEducationalContentArgs } from "./UpdateEducationalContentArgs";
import { DeleteEducationalContentArgs } from "./DeleteEducationalContentArgs";
import { User } from "../../user/base/User";
import { EducationalContentService } from "../educationalContent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EducationalContent)
export class EducationalContentResolverBase {
  constructor(
    protected readonly service: EducationalContentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EducationalContent",
    action: "read",
    possession: "any",
  })
  async _educationalContentsMeta(
    @graphql.Args() args: EducationalContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EducationalContent])
  @nestAccessControl.UseRoles({
    resource: "EducationalContent",
    action: "read",
    possession: "any",
  })
  async educationalContents(
    @graphql.Args() args: EducationalContentFindManyArgs
  ): Promise<EducationalContent[]> {
    return this.service.educationalContents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EducationalContent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EducationalContent",
    action: "read",
    possession: "own",
  })
  async educationalContent(
    @graphql.Args() args: EducationalContentFindUniqueArgs
  ): Promise<EducationalContent | null> {
    const result = await this.service.educationalContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationalContent)
  @nestAccessControl.UseRoles({
    resource: "EducationalContent",
    action: "create",
    possession: "any",
  })
  async createEducationalContent(
    @graphql.Args() args: CreateEducationalContentArgs
  ): Promise<EducationalContent> {
    return await this.service.createEducationalContent({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationalContent)
  @nestAccessControl.UseRoles({
    resource: "EducationalContent",
    action: "update",
    possession: "any",
  })
  async updateEducationalContent(
    @graphql.Args() args: UpdateEducationalContentArgs
  ): Promise<EducationalContent | null> {
    try {
      return await this.service.updateEducationalContent({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EducationalContent)
  @nestAccessControl.UseRoles({
    resource: "EducationalContent",
    action: "delete",
    possession: "any",
  })
  async deleteEducationalContent(
    @graphql.Args() args: DeleteEducationalContentArgs
  ): Promise<EducationalContent | null> {
    try {
      return await this.service.deleteEducationalContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: EducationalContent
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
